version: '3.7'

services:


######################################################
# TRE Proxy
######################################################

  nginx-tre:
    image: nginx:latest
    container_name: nginx_tre
    ports:
      - 8890:80
    networks:
      - tre-net
    depends_on:
      - tre-api
      - tre-ui
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf

######################################################
# TRE LAYER
######################################################

  tre-ui:
    image: harbor.ukserp.ac.uk:443/dare-trefx/control-tre-ui:${verTUI}
    container_name: treUI
    restart: always
    networks:
      - tre-net
    ports:
      - 8989:80
    depends_on:
      - tre-api
    environment:
      - TreAPISettings__Address=http://treAPI
      - DareAPISettings__Address=http://submissionAPI
      
      - Serilog__SeqServerUrl=http://seq-tre:5341
      - TreKeyCloakSettings__Authority=${KeyCloakBaseRealmAddress}${TreKeyCloakRealm}
      - TreKeyCloakSettings__MetaAddress=${KeyCloakBaseRealmAddress}${TreKeyCloakRealm}/.well-known/openid-configuration
      - TreKeyCloakSettings__BaseUrl=${KeyCloakBaseRealmAddress}${TreKeyCloakRealm}
      - TreKeyCloakSettings__ClientId=${TreKeyCloakClientId}
      - TreKeyCloakSettings__ClientSecret=${TreKeyCloakSecret}
      - TreKeyCloakSettings__ValidAudiences=${TreValidAudiences}
      - TreKeyCloakSettings__Proxy=${useproxy}
      - TreKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - TreKeyCloakSettings__BypassProxy="treAPI,seq-tre"    
      - TreKeyCloakSettings__TokenExpiredAddress=${KeyCloakTokenExpredAddressUI}
      - TreKeyCloakSettings__UseRedirectURL=${KeyCloakUseRedirect}
      - TreKeyCloakSettings__RedirectURL=${KeyCloakClientUIRediretURL}
      - EgressKeyCloakSettings__Authority=${KeyCloakBaseRealmAddress}${EgressKeyCloakRealm}
      - EgressKeyCloakSettings__MetaAddress=${KeyCloakBaseRealmAddress}${EgressKeyCloakRealm}/.well-known/openid-configuration
      - EgressKeyCloakSettings__BaseUrl=${KeyCloakBaseRealmAddress}${EgressKeyCloakRealm}
      - EgressKeyCloakSettings__ClientId=${EgressKeyCloakClientId}
      - EgressKeyCloakSettings__ClientSecret=${EgressKeyCloakSecret}
      - EgressKeyCloakSettings__ValidAudiences=${EgressValidAudiences}
      - EgressKeyCloakSettings__Proxy=${useproxy}
      - EgressKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - EgressKeyCloakSettings__BypassProxy="treAPI,seq-tre"    
      - EgressKeyCloakSettings__TokenExpiredAddress=${KeyCloakTokenExpredAddressUI}
      - EgressKeyCloakSettings__UseRedirectURL=${KeyCloakUseRedirect}
      - EgressKeyCloakSettings__RedirectURL=${KeyCloakClientUIRediretURL}
      - SubmissionKeyCloakSettings__Authority=${KeyCloakBaseRealmAddress}${SubmissionKeyCloakRealm}
      - SubmissionKeyCloakSettings__MetaAddress=${KeyCloakBaseRealmAddress}${SubmissionKeyCloakRealm}/.well-known/openid-configuration
      - SubmissionKeyCloakSettings__BaseUrl=${KeyCloakBaseRealmAddress}${SubmissionKeyCloakRealm}
      - SubmissionKeyCloakSettings__ClientId=${SubmissionKeyCloakClientId}
      - SubmissionKeyCloakSettings__ClientSecret=${SubmissionKeyCloakSecret}
      - SubmissionKeyCloakSettings__ValidAudiences=${SubmissionValidAudiences}
      - SubmissionKeyCloakSettings__Proxy=${useproxy}
      - SubmissionKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - SubmissionKeyCloakSettings__BypassProxy="treAPI,seq-tre"    
      - SubmissionKeyCloakSettings__TokenExpiredAddress=${KeyCloakTokenExpredAddressUI}
      - SubmissionKeyCloakSettings__UseRedirectURL=${KeyCloakUseRedirect}
      - SubmissionKeyCloakSettings__RedirectURL=${KeyCloakClientUIRediretURL}

  tre-api:
    image: harbor.ukserp.ac.uk:443/dare-trefx/control-tre-api:${verTAPI}
    container_name: treAPI
    restart: always
    networks:
      - tre-net
      - engine-tre
    ports:
      - 8072:80
    depends_on:
      postgresql_tre:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Server=postgres-tre;Port=5432;Database=DARE-Control;Include Error Detail=true;User Id=${PGLOGIN};Password=${PGPASSWORD};
      - RabbitMQ__HostAddress=rabbitmq-tre
      - Serilog__SeqServerUrl=http://seq-tre:5341
      - DareAPISettings__Address=${submissionurl}
      - DataEgressAPISettings__Address=https://egressAPI
      - TreKeyCloakSettings__Authority=${KeyCloakBaseRealmAddress}${TreKeyCloakRealm}
      - TreKeyCloakSettings__MetaAddress=${KeyCloakBaseRealmAddress}${TreKeyCloakRealm}/.well-known/openid-configuration
      - TreKeyCloakSettings__BaseUrl=${KeyCloakBaseRealmAddress}${TreKeyCloakRealm}
      - TreKeyCloakSettings__ClientId=${TreKeyCloakClientId}
      - TreKeyCloakSettings__ClientSecret=${TreKeyCloakSecret}
      - TreKeyCloakSettings__ValidAudiences=${TreValidAudiences}
      - TreKeyCloakSettings__Proxy=${useproxy}
      - TreKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - TreKeyCloakSettings__BypassProxy="treAPI,seq-tre"    
      - TreKeyCloakSettings__TokenExpiredAddress=${KeyCloakTokenExpredAddressUI}
      - TreKeyCloakSettings__UseRedirectURL=${KeyCloakUseRedirect}
      - TreKeyCloakSettings__RedirectURL=${KeyCloakClientUIRediretURL}
      - EgressKeyCloakSettings__Authority=${KeyCloakBaseRealmAddress}${EgressKeyCloakRealm}
      - EgressKeyCloakSettings__MetaAddress=${KeyCloakBaseRealmAddress}${EgressKeyCloakRealm}/.well-known/openid-configuration
      - EgressKeyCloakSettings__BaseUrl=${KeyCloakBaseRealmAddress}${EgressKeyCloakRealm}
      - EgressKeyCloakSettings__ClientId=${EgressKeyCloakClientId}
      - EgressKeyCloakSettings__ClientSecret=${EgressKeyCloakSecret}
      - EgressKeyCloakSettings__ValidAudiences=${EgressValidAudiences}
      - EgressKeyCloakSettings__Proxy=${useproxy}
      - EgressKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - EgressKeyCloakSettings__BypassProxy="treAPI,seq-tre"    
      - EgressKeyCloakSettings__TokenExpiredAddress=${KeyCloakTokenExpredAddressUI}
      - EgressKeyCloakSettings__UseRedirectURL=${KeyCloakUseRedirect}
      - EgressKeyCloakSettings__RedirectURL=${KeyCloakClientUIRediretURL}
      - SubmissionKeyCloakSettings__Authority=${KeyCloakBaseRealmAddress}${SubmissionKeyCloakRealm}
      - SubmissionKeyCloakSettings__MetaAddress=${KeyCloakBaseRealmAddress}${SubmissionKeyCloakRealm}/.well-known/openid-configuration
      - SubmissionKeyCloakSettings__BaseUrl=${KeyCloakBaseRealmAddress}${SubmissionKeyCloakRealm}
      - SubmissionKeyCloakSettings__ClientId=${SubmissionKeyCloakClientId}
      - SubmissionKeyCloakSettings__ClientSecret=${SubmissionKeyCloakSecret}
      - SubmissionKeyCloakSettings__ValidAudiences=${SubmissionValidAudiences}
      - SubmissionKeyCloakSettings__Proxy=${useproxy}
      - SubmissionKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - SubmissionKeyCloakSettings__BypassProxy="treAPI,seq-tre"    
      - SubmissionKeyCloakSettings__TokenExpiredAddress=${KeyCloakTokenExpredAddressUI}
      - SubmissionKeyCloakSettings__UseRedirectURL=${KeyCloakUseRedirect}
      - SubmissionKeyCloakSettings__RedirectURL=${KeyCloakClientUIRediretURL}
      - AgentSettings__UseTESK=${UseTESK}
      - AgentSettings__UseHutch=${UseHutch}
      - AgentSettings__UseRabbit=${UseRabbit}
      

######################################################
# POSTGRES
######################################################
  postgresql_tre:
    image: docker.io/bitnami/postgresql:latest
    container_name: postgres-tre
    restart: always
    environment:
#      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=${PGLOGIN}
      - POSTGRESQL_DATABASE=DARE-Control
      - POSTGRESQL_PASSWORD=${PGPASSWORD}
    networks:
      - tre-net
    ports:
      - "5433:5432"
    volumes:
      - postgresql_data2:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -U ${PGLOGIN} -d ${PGLOGIN}" ]
      
  postgres:
    image: postgres
    #container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password123
      - POSTGRES_DB=DARE-Control
      - POSTGRES_DB=myCoolDataDB
    networks:
      - engine-tre
    ports:
      - 32769:5432
    volumes:
      - postgresql_hasura_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -U ${PGLOGIN} -d ${PGLOGIN}" ]
      
      
      
  postgresql-hasura-query:
    image: docker.io/bitnami/postgresql:latest
    container_name: postgresql-hasura-query
    restart: always
    environment:
#      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=${PGLOGIN}
      - POSTGRESQL_DATABASE=hasura_data
      - POSTGRESQL_PASSWORD=${PGPASSWORD}
    networks:
      - engine-agent
    ports:
      - "5435:5432"
    volumes:
      - postgresql_hasura_query_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -U ${PGLOGIN} -d ${PGLOGIN}" ]
  
  
  
######################################################
# SEQ / Serilog
######################################################      
  seq-tre:
    image: datalust/seq:latest
    container_name: seq-tre
    restart: always
    networks:
      - tre-net
    ports:
      - 5342:80
    volumes:
      - seq_data2:/data
    environment:
      - ACCEPT_EULA=Y

######################################################
# Rabbit MQ
######################################################

  rabbitmq-tre:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq-tre'
    hostname: rabbitmq-tre
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - rabbitdata2:/var/lib/rabbitmq/
        - rabbitlogs2:/var/log/rabbitmq
    networks:
      - tre-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

######################################################
# HASURA
######################################################      
  hasura-engine:
    image: hasura/graphql-engine
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:password123@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://hasura-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://hasura-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://hasura-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://hasura-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://hasura-agent:8081/api/v1/snowflake"}}}}'
      POSTGRSS_LOGIN: 'postgres://postgresql-hasura-query:${PGPASSWORD}@${PGLOGIN}:5432/myCoolDataDB'
      HASURA_GRAPHQL_AUTH_HOOK: 'http://tre-api:80/api/HasuraAuthentication'
      HASURA_GRAPHQL_ADMIN_SECRET: 'ohCOOl'
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
    networks:
      - engine-agent
      - engine-tre
    depends_on:
      hasura-agent:
        condition: service_healthy
  hasura-agent:
    image: hasura/graphql-data-connector
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - engine-agent
      - engine-tre
    
#  control:
#    image: harbor.ukserp.ac.uk/dare/control:1.0.0
#    restart: always
#    ports:
#      - 8088:80
#    environment:
#      CONNECTIONSTRINGS__DEFAULTCONNECTION: "Server=postgres;Port=32769;Database=DARE-Control;UserId=postgres;Password=password123;"
######################################################
# VOLUME
######################################################
volumes:
    postgresql_data2:
      driver: local
    seq_data2:
      driver: local
    rabbitdata2:
      driver: local
    rabbitlogs2:
      driver: local 
    postgresql_hasura_data:
      driver: local           
    postgresql_hasura_query_data:
      driver: local      
      
######################################################
# networks
######################################################      
networks:
  tre-net:
    driver: bridge
  engine-agent:
    driver: bridge
  engine-tre:
    driver: bridge
     